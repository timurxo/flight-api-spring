package com.home.flight.beans;

import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;


/**
 * Hibernate annotations (JPA)
 * ORM framework - object relational mapping
 * 
 * JPA - standard for ORM frameworks
 * Hibernate implements that standard
 * 
 */

// MAP TO THE DB TABLE
@Entity // this is an object to be managed by Hibernate
 
@Table(name="flight_data")	// name of the database table
public class Flight {
	
	@Id 
	@GeneratedValue(strategy = GenerationType.IDENTITY) // this value is generated by the database (insert a record, stmt.getGeneratedKeys)
	@Column
	private int id;
	
	// @Column specifies to which column in DB the field corresponds to (if no arg - default name)
	@Column(name="from_airport")
	private String fromAirport;
	
	@Column(name="to_airport")
	private String toAirport;
	
	@Column
	private Date departure;
	
	@Column
	private Date arrival;
	
	@Column(name="flight_number")
	private String flightNumber;

	
	
	
	

	public Flight() {
		super();
	}

	public Flight(String fromAirport, String toAirport, Date departure, Date arrival, String flightNumber) {
		super();
		this.fromAirport = fromAirport;
		this.toAirport = toAirport;
		this.flightNumber = flightNumber;
		this.departure = departure;
		this.arrival = arrival;

	}

	public Flight(int id, String fromAirport, String toAirport, Date departure, Date arrival, String flightNumber) {
		super();
		this.id = id;
		this.fromAirport = fromAirport;
		this.toAirport = toAirport;
		this.departure = departure;
		this.arrival = arrival;
		this.flightNumber = flightNumber;
	}
	
	// * FOR TESTING PURPOSES
	public Flight(String fromAirport, String toAirport, String flightNumber) {
		super();
		this.departure = null;
		this.arrival = null;
		this.fromAirport = fromAirport;
		this.toAirport = toAirport;
		this.flightNumber = flightNumber;
	}
	
	/*
	 * TRY OVERRIDE CONSTRUCTOR WITH STRING FOR DATE?
	 * 
	 * try to write getters for date after converting them to string
	 */

	public int getId() {
		return id;
	}


	public void setId(int id) {
		this.id = id;
	}

	public String getFromAirport() {
		return fromAirport;
	}

	public void setFromAirport(String fromAirport) {
		this.fromAirport = fromAirport;
	}

	public String getToAirport() {
		return toAirport;
	}

	public void setToAirport(String toAirport) {
		this.toAirport = toAirport;
	}

	public Date getDeparture() {
		return departure;
	}

	public void setDeparture(Date departure) {
		this.departure = departure;
	}

	public Date getArrival() {
		return arrival;
	}


	public void setArrival(Date arrival) {
		this.arrival = arrival;
	}

	public String getFlightNumber() {
		return flightNumber;
	}

	public void setFlightNumber(String flightNumber) {
		this.flightNumber = flightNumber;
	}

	@Override
	public String toString() {
		return "Flight [id=" + id + ", fromAirport=" + fromAirport + ", toAirport=" + toAirport + ", departure="
				+ departure + ", arrival=" + arrival + ", flightNumber=" + flightNumber + "];" + "\n";
	}

	@Override
	public int hashCode() {
		return Objects.hash(arrival, departure, flightNumber, fromAirport, id, toAirport);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Flight other = (Flight) obj;
		return Objects.equals(arrival, other.arrival) && Objects.equals(departure, other.departure)
				&& Objects.equals(flightNumber, other.flightNumber) && Objects.equals(fromAirport, other.fromAirport)
				&& id == other.id && Objects.equals(toAirport, other.toAirport);
	}
	
	
	

}